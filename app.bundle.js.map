{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://webpack-template/./src/DOM.js","webpack://webpack-template/./src/shipFactory.js","webpack://webpack-template/./src/boardFactory.js","webpack://webpack-template/./src/playerFactory.js","webpack://webpack-template/./src/index.js"],"sourcesContent":["const DOM = () => {\n    const displayBoards = () => {\n        const playerOneBoard = document.querySelector('.player-one.board');\n        const playerTwoBoard = document.querySelector('.player-two.board');\n        for (let i = 0; i < 10; i++) {\n            for (let j = 0; j < 10; j++) {\n                const playerOneCell = document.createElement('div');\n                playerOneCell.classList.add('cell');\n                playerOneCell.dataset.row = i;\n                playerOneCell.dataset.col = j;\n                playerOneBoard.append(playerOneCell);\n\n                const playerTwoCell = document.createElement('div');\n                playerTwoCell.classList.add('cell');\n                playerTwoCell.dataset.row = i;\n                playerTwoCell.dataset.col = j;\n                playerTwoBoard.append(playerTwoCell);\n            }\n        }\n    }\n\n    const generateShips = () => {\n        const shipsData = [\n            {\n                name: 'carrier',\n                length: 5,\n            },\n            {\n                name: 'battleship',\n                length: 4,\n            },\n            {\n                name: 'destroyer',\n                length: 3,\n            },\n            {\n                name: 'submarine',\n                length: 2,\n            },\n            {\n                name: 'patrol',\n                length: 2,\n            },\n        ];\n\n        const createdShips = [];\n        shipsData.forEach(ship => {\n            const newShip = document.createElement('div');\n            newShip.classList.add('ship');\n            newShip.setAttribute('id', ship.name);\n            newShip.draggable = \"true\";\n            newShip.dataset.length = ship.length;\n            newShip.dataset.direction = \"row\";\n            for (let i = 0; i < ship.length; i++) {\n                const shipPart = document.createElement('div');\n                shipPart.classList.add('ship-part');\n                newShip.append(shipPart)\n            }\n            createdShips.push(newShip);\n        })\n\n        return createdShips;\n    }\n\n    const isInTheBoard = (draggedShip, startCoordinates) => {\n        const length = parseInt(draggedShip.dataset.length);\n        const direction = draggedShip.dataset.direction;\n        const [row, col] = startCoordinates;\n\n        if (direction === \"row\") {\n            if (col + length - 1 < 0 || col + length - 1 > 9) return false;\n        } else if (direction === \"col\") {\n            if (row + length - 1 < 0 || row + length - 1 > 9) return false;\n        }\n\n        return true;\n    }\n\n    const getShipCoordinates = (ship, startCoordinates) => {\n        const [row, col] = startCoordinates;\n        const length = parseInt(ship.dataset.length);\n        const direction = ship.dataset.direction;\n\n        const shipCoordinates = [];\n        if (direction === \"row\") {\n            for (let i = col; i < col + length; i++) shipCoordinates.push([row, i])\n        } else if (direction === \"col\") {\n            for (let i = row; i < row + length; i++) shipCoordinates.push([i, col]);\n        }\n\n        return shipCoordinates;\n    }\n\n    const getAllCellsUsed = () => {\n        const allShipsPlaced = document.querySelectorAll('.active .cell .ship:not(.dragged)');\n        const allCellsUsed = [];\n        allShipsPlaced.forEach(ship => {\n            const startingCoordinates = [parseInt(ship.dataset.row), parseInt(ship.dataset.col)];\n            const shipCoordinates = getShipCoordinates(ship, startingCoordinates);\n            shipCoordinates.forEach(coordinate => allCellsUsed.push(coordinate));\n        })\n        return allCellsUsed;\n    }\n\n    const areCoordinatesAdjacent = (draggedShipCoordinates, shipsPlacedCoordinates) => {\n        for (let coord1 of draggedShipCoordinates) {\n            for (let coord2 of shipsPlacedCoordinates) {\n                const rowDiff = Math.abs(coord1[0] - coord2[0]);\n                const colDiff = Math.abs(coord1[1] - coord2[1]);\n                if (rowDiff <= 1 && colDiff <= 1) return true;\n            }\n        }\n        return false;\n    }\n\n    const isValidPosition = (draggedShip, startCoordinates) => {\n        if (!isInTheBoard(draggedShip, startCoordinates)) return false;\n        const draggedShipCoordinates = getShipCoordinates(draggedShip, startCoordinates);\n        const shipsPlacedCoordinates = getAllCellsUsed();\n        if (shipsPlacedCoordinates.length) {\n            if (areCoordinatesAdjacent(draggedShipCoordinates, shipsPlacedCoordinates)) return false;\n        }\n\n        return true;\n    }\n\n    const dragStart = (event) => {\n        event.dataTransfer.setData('text/plain', event.target.id);\n\n        event.target.classList.add('dragged');\n    }\n\n    const dragEnd = (event) => {\n        event.preventDefault();\n        event.target.classList.toggle('dragged');\n    }\n\n    const dragOver = (event) => {\n        event.preventDefault();\n    }\n\n    const shipClick = (event) => {\n        const ship = event.target.closest('.ship')\n\n        if (!ship.parentNode.classList.contains('cell')) return;\n\n        const startCoordinates = [parseInt(ship.dataset.row), parseInt(ship.dataset.col)];\n        const direction = ship.dataset.direction;\n\n        ship.classList.toggle('dragged')\n\n        if (direction === \"row\") {\n            ship.dataset.direction = \"col\";\n            isValidPosition(ship, startCoordinates) ? ship.style.gridAutoFlow = \"row\" : ship.dataset.direction = \"row\";\n        } else if (direction === \"col\") {\n            ship.dataset.direction = \"row\"\n            isValidPosition(ship, startCoordinates) ? ship.style.gridAutoFlow = \"column\" : ship.dataset.direction = \"col\";\n        }\n\n        ship.classList.toggle('dragged')\n    }\n\n    const dragEnter = (event) => {\n        event.preventDefault();\n        const cell = event.target;\n        cell.classList.add('drag-over')\n    }\n\n    const dragLeave = (event) => {\n        event.preventDefault();\n        const cell = event.target;\n        cell.classList.remove('drag-over')\n    }\n\n    const dragDrop = (event) => {\n        event.preventDefault();\n\n        const cell = event.target;\n        const [row, col] = [parseInt(cell.dataset.row), parseInt(cell.dataset.col)];\n        cell.classList.remove('drag-over')\n\n        const data = event.dataTransfer.getData('text/plain');\n        const draggableShip = document.getElementById(data);\n\n        try {\n            if (!isValidPosition(draggableShip, [row, col]) || cell.classList.contains('ship-part')) return;\n            draggableShip.style.position = \"absolute\";\n            draggableShip.dataset.row = row;\n            draggableShip.dataset.col = col;\n            cell.append(draggableShip);\n        } catch {\n            return;\n        }\n    }\n\n    const shipListeners = () => {\n        const allShips = document.querySelectorAll('.active .ship');\n        allShips.forEach(ship => {\n            ship.addEventListener('dragstart', dragStart)\n            ship.addEventListener('dragend', dragEnd)\n            ship.addEventListener('click', shipClick);\n        })\n    }\n\n    const boardListeners = () => {\n        const allCells = document.querySelectorAll('.active .board .cell');\n        allCells.forEach(cell => {\n            cell.addEventListener('dragenter', dragEnter);\n            cell.addEventListener('dragleave', dragLeave);\n            cell.addEventListener('dragover', dragOver);\n            cell.addEventListener('drop', dragDrop);\n        })\n    }\n\n    const displayShips = () => {\n        const shipsContainer = document.querySelector('.active .ship-container');\n        const ships = generateShips();\n        ships.forEach(ship => {\n            shipsContainer.append(ship);\n        })\n        shipListeners()\n        boardListeners()\n    }\n\n    const resetBoard = () => {\n        const shipContainer = document.querySelector('.active .ship-container');\n        const allShips = document.querySelectorAll('.active .ship');\n\n        allShips.forEach(ship => ship.remove())\n        generateShips().forEach(ship => shipContainer.append(ship))\n        shipListeners()\n    }\n\n    const getRandomCoordinates = () => {\n        const row = Math.floor(Math.random() * 10);\n        const col = Math.floor(Math.random() * 10);\n\n        return [row, col];\n    }\n\n    const getRandomDirection = () => {\n        const randomNumber = Math.floor(Math.random() * 2);\n\n        return randomNumber === 0 ? \"row\" : \"col\";\n    }\n\n    const changeDirection = (ship) => {\n        const direction = getRandomDirection();\n        if (direction === \"col\") {\n            ship.style.gridAutoFlow = \"row\";\n            ship.dataset.direction = \"col\";\n        }\n    }\n\n    const placeRandomly = () => {\n        resetBoard();\n        const allShips = document.querySelectorAll('.active .ship-container .ship');\n        allShips.forEach(ship => {\n            changeDirection(ship);\n            let [row, col] = getRandomCoordinates();\n            while (!isValidPosition(ship, [row, col])) [row, col] = getRandomCoordinates();\n            ship.style.position = \"absolute\";\n            ship.dataset.row = row;\n            ship.dataset.col = col;\n            const cell = document.querySelector(`.active .cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\n            cell.append(ship);\n        })\n    }\n\n    const placeComputerShips = () => {\n        const playerOne = document.querySelector('.player-one-container');\n        const playerTwo = document.querySelector('.player-two-container');\n\n        playerOne.classList.toggle('active')\n        playerTwo.classList.toggle('active');\n        placeRandomly()\n    }\n\n    const checkShipsPlaced = () => {\n        const allShips = document.querySelectorAll('.active .cell .ship');\n        return allShips.length >= 5;\n    }\n\n    const changePlayerDisplay = () => {\n        const playerOne = document.querySelector('.player-one-container');\n        const playerTwo = document.querySelector('.player-two-container');\n        const nextPlayerButton = document.querySelector('button.next-player');\n        const startGame = document.querySelector('button.start-game');\n\n        playerOne.classList.toggle('active');\n        playerOne.classList.toggle('inactive');\n        playerTwo.classList.toggle('active');\n        playerTwo.classList.toggle('inactive');\n        nextPlayerButton.classList.toggle('inactive');\n        startGame.classList.toggle('inactive')\n    }\n\n    const nextPlayerPlacement = () => {\n        changePlayerDisplay()\n        displayShips();\n    }\n\n    const changePlayer = () => {\n        const activePlayer = document.querySelector('.player.active');\n        const inactivePlayer = document.querySelector('.player.inactive');\n\n        activePlayer.classList.toggle('active')\n        activePlayer.classList.toggle('inactive')\n        inactivePlayer.classList.toggle('active')\n        inactivePlayer.classList.toggle('inactive')\n    }\n\n    const displayBothBoards = () => {\n        const playerOne = document.querySelector('.player-one-container')\n        const playerTwo = document.querySelector('.player-two-container')\n        const shipContainers = document.querySelectorAll('.ship-container');\n        playerTwo.classList.toggle('inactive');\n        shipContainers.forEach(container => container.classList.toggle('inactive'));\n    }\n\n    const loadGame = () => {\n        const gameModeContainer = document.querySelector('.game-mode-container');\n        const gameContainer = document.querySelector('.game-container');\n        const playerOne = document.querySelector('.player-one-container');\n        const controllerContainer = document.querySelector('.controller-container');\n\n        gameModeContainer.classList.toggle('inactive');\n        gameContainer.classList.toggle('inactive');\n        playerOne.classList.toggle('inactive');\n        playerOne.classList.toggle('active');\n        controllerContainer.classList.toggle('inactive')\n    }\n\n    const displayNames = (playerOne, playerTwo) => {\n        const playerOneName = document.querySelector('.player-one.display-name')\n        const playerTwoName = document.querySelector('.player-two.display-name')\n\n        playerOneName.textContent = `${playerOne.name} board`\n        playerTwoName.textContent = `${playerTwo.name} board`;\n    }\n\n    const loadVsPlayer = () => {\n        loadGame()\n        const startButton = document.querySelector('button.start-game')\n        startButton.classList.toggle('inactive')\n    }\n\n    const loadVsComputer = () => {\n        loadGame()\n        const nextPlayerButton = document.querySelector('button.next-player')\n        nextPlayerButton.classList.toggle('inactive')\n    }\n\n    const removeCells = () => {\n        const allCells = document.querySelectorAll('.cell');\n        allCells.forEach(cell => cell.remove());\n    }   \n\n    const vsPlayerDisplayBothBoards = () => {\n        const activePlayer = document.querySelector('.player.active');\n        const inactivePlayer = document.querySelector('.player.inactive');\n\n        activePlayer.classList.toggle('active')\n        inactivePlayer.classList.toggle('inactive')\n    }\n\n    const resetGame = () => {\n        const gameModeContainer = document.querySelector('.game-mode-container')\n        const gameContainer = document.querySelector('.game-container')\n        const allShipContainer = document.querySelectorAll('.ship-container')\n        const allPlayerContainer = document.querySelectorAll('.player')\n        const nextPlayerButton = document.querySelector('button.next-player')\n        const winnerContainer = document.querySelector('.winner-container')\n        const turn = document.querySelector('.game-log')\n\n        gameModeContainer.classList.toggle('inactive')\n        gameContainer.classList.toggle('inactive')\n        allShipContainer.forEach(container => container.classList.toggle('inactive'))\n        allPlayerContainer.forEach(container => container.classList.toggle('inactive'))\n        nextPlayerButton.classList.toggle('inactive')\n        winnerContainer.classList.toggle('inactive')\n        turn.textContent = \"\"\n\n        removeCells()\n    }\n\n    const displayWinner = (playerName) => {\n        const winnerContainer = document.querySelector('.winner-container')\n        winnerContainer.classList.toggle('inactive')\n        \n        const winnerMessage = document.querySelector('.winner-message')\n        winnerMessage.textContent = `${playerName} wins!`\n    }\n\n    const initVsPlayer = (playerOne, playerTwo) => {\n        loadVsPlayer();\n        displayNames(playerOne, playerTwo)\n        displayBoards();\n        displayShips()\n    }\n\n    const initVsComputer = (player, computer) => {\n        loadVsComputer();\n        displayNames(player, computer)\n        displayBoards();\n        displayShips()\n    }\n\n    const displayGameLog = (playerTurn) => {\n        const gameLog = document.querySelector('.game-log');\n        gameLog.textContent = `${playerTurn.name} turn`\n    }\n\n    return {\n        initVsPlayer,\n        initVsComputer,\n        resetBoard,\n        placeRandomly,\n        changePlayer,\n        checkShipsPlaced,\n        getShipCoordinates,\n        nextPlayerPlacement,\n        displayWinner,\n        resetGame,\n        displayBothBoards,\n        placeComputerShips,\n        vsPlayerDisplayBothBoards,\n        displayGameLog\n    }\n}\n\nexport default DOM;","export default class Ship {\n  constructor(name, length) {\n    this.name = name;\n    this.length = length;\n    this.totalHits = 0;\n    this.sunk = false;\n  }\n\n  getHit() {\n    this.totalHits += 1;\n    this.isSunk();\n  }\n\n  isSunk() {\n    this.sunk = this.totalHits >= this.length;\n  }\n}\n","import Ship from './shipFactory.js';\n\nexport default class Board {\n  constructor() {\n    this.board = Array.from({ length: 10 }, () => Array.from({length: 10 }).fill(null));\n    this.ships = {};\n  }\n\n  addShip(shipName, shipLength, coordinates) {\n    const newShip = new Ship(shipName, shipLength);\n    this.ships[shipName] = newShip;\n    coordinates.forEach(coordinate => {\n      const [row, col] = coordinate;\n      this.board[row][col] = newShip;\n    })\n  }\n\n  receiveAttack(coordinates) {\n    const [row, col] = coordinates;\n\n    if (!this.board[row][col]) {\n      return false;\n    } else {\n      const ship = this.board[row][col];\n      ship.getHit();\n      return true;\n    }\n  }\n\n  getShips() {\n    return Object.values(this.ships);\n  }\n\n  allShipsSunk() {\n    const allShips = this.getShips();\n    return allShips.every(ship => ship.sunk);\n  }\n\n  resetBoard() {\n    this.board = Array.from({ length: 10 }, () => Array.from({length: 10 }).fill(null));\n    this.ships = {};\n  }\n}","import Board from \"./boardFactory.js\";\n\nexport { Player, Computer }\n\nclass Player {\n  constructor(name) {\n    this.name = name;\n    this.board = new Board();\n    this.enemyBoard = null;\n    this.turn = false;\n  }\n\n  setEnemyBoard(enemyBoard) {\n    this.enemyBoard = enemyBoard;\n  }\n\n  getBoard() {\n    return this.board;\n  }\n  \n  addShip(shipName, shipLength, coordinates) {\n    this.board.addShip(shipName, shipLength, coordinates);\n  }\n\n  playerAttack(coordinates) {\n    return this.enemyBoard.receiveAttack(coordinates);\n  }\n\n  checkGameOver() {\n    return this.enemyBoard.allShipsSunk();\n  }\n\n  reset() {\n    this.board.resetBoard();\n  }\n}\n\nclass Computer extends Player {\n  constructor(name) {\n    super(name)\n    this.allAttacksDone = [];\n    this.attackHit = false;\n    this.allHitAttacks = [];\n    this.nextAttack = [];\n  }\n\n  isAttackAlreadyDone(coordinates) {\n    const [row, col] = coordinates;\n\n    for (let attack of this.allAttacksDone) {\n      if (attack[0] === row && attack[1] === col) return true;\n    }\n    return false;\n  }\n\n  randomCoordinates() {\n    let row = Math.floor(Math.random() * 10);\n    let col = Math.floor(Math.random() * 10);\n\n    while (this.isAttackAlreadyDone([row, col])) {\n      row = Math.floor(Math.random() * 10);\n      col = Math.floor(Math.random() * 10);\n    }\n\n    return [row, col];\n  }\n\n  computerAttacks() {\n    if (!this.attackHit || !this.nextAttack.length) {\n      this.resetAttackStatus()\n      const isHit = this.randomComputerAttack();\n      if (isHit) {\n        return this.computerHits()\n      } else if (!isHit) {\n        return false;\n      }\n    } else if (this.attackHit && this.nextAttack.length) {\n      const coordinates = this.nextAttack.shift();\n      this.allAttacksDone.push(coordinates)\n      const isHit = this.enemyBoard.receiveAttack(coordinates);\n      if (isHit) {\n        return this.computerHits()\n      } else if (!isHit && !this.nextAttack.length) {\n        this.resetAttackStatus()\n        return false;\n      }\n    }\n  }\n\n  randomComputerAttack() {\n    const coordinates = this.randomCoordinates();\n    this.allAttacksDone.push(coordinates);\n    return this.enemyBoard.receiveAttack(coordinates);\n  }\n\n  computerHits() {\n    this.attackHit = true;\n    this.allHitAttacks.push(this.allAttacksDone.at(-1));\n    const lastHit = this.allHitAttacks.at(-1);\n    const moves = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n    moves.forEach(move => {\n      const newRow = move[0] + lastHit[0];\n      const newCol = move[1] + lastHit[1];\n      if (this.isAttackAlreadyDone([newRow, newCol]) || (newRow < 0 || newCol < 0 || newRow > 9 || newCol > 9)) return;\n      this.nextAttack.push([newRow, newCol]);\n    })\n\n    if (this.allHitAttacks.length > 1) {\n      const previousHit = this.allHitAttacks.at(-2);\n      if (lastHit[0] === previousHit[0]) {\n        this.nextAttack = this.nextAttack.filter(move => move[0] === lastHit[0]);\n      } else if (lastHit[1] === previousHit[1]) {\n        this.nextAttack = this.nextAttack.filter(move => move[1] === lastHit[1]);\n      }\n    }\n    return true;\n  }\n\n  resetAttackStatus() {\n    this.attackHit = false;\n    this.allHitAttacks = [];\n    this.nextAttack = [];\n  }\n\n  getLastCoordinates() {\n    return this.allAttacksDone.at(-1);\n  }\n}","import DOM from \"./DOM.js\"\nimport { Player, Computer } from \"./playerFactory.js\"\n\n\nconst setCountdown = () => {\n    const countdownElement = document.querySelector('.countdown')\n    let countdown = 5;\n\n    const countdownInterval = setInterval(() => {\n        countdown--;\n        countdownElement.textContent = countdown;\n        if (countdown <= 0) {\n            clearInterval(countdownInterval)\n            countdownElement.textContent = \"Change!\"\n        }\n    }, 1000)\n    countdownElement.textContent = 5\n    return countdownInterval;\n}\n\nconst displayCountdown = () => {\n    const element = document.querySelector('.change-player-container');\n    const gameLog = document.querySelector('.game-log')\n    const gameContainer = document.querySelector('.game-container');\n\n    element.classList.toggle('inactive')\n    gameLog.classList.toggle('inactive')\n    gameContainer.classList.toggle('inactive')\n}\n\nconst vsPlayer = () => {\n    const playerOne = new Player('Player 1')\n    const playerTwo = new Player('Player 2')\n    playerOne.setEnemyBoard(playerTwo.getBoard())\n    playerTwo.setEnemyBoard(playerOne.getBoard());\n\n    const dom = DOM();\n    dom.initVsPlayer(playerOne, playerTwo);\n\n    const playerActive = () => {\n        return playerOne.turn ? playerOne : playerTwo\n    }\n\n    const nextPlayerButton = document.querySelector('button.next-player')\n    nextPlayerButton.addEventListener('click', () => {\n        if (!dom.checkShipsPlaced()) return;\n        const allShips = document.querySelectorAll('.active .ship');\n        allShips.forEach(ship => {\n            const shipName = ship.id;\n            const shipLength = parseInt(ship.dataset.length);\n            const shipCoordinates = dom.getShipCoordinates(ship, [parseInt(ship.dataset.row), parseInt(ship.dataset.col)]);\n            playerOne.addShip(shipName, shipLength, shipCoordinates);\n            ship.remove();\n        })\n        dom.nextPlayerPlacement()\n    })\n\n    const startGameVsPlayer = () => {\n        if (!dom.checkShipsPlaced()) return;\n        const allShips = document.querySelectorAll('.active .ship');\n        allShips.forEach(ship => {\n            const shipName = ship.id;\n            const shipLength = parseInt(ship.dataset.length);\n            const shipCoordinates = dom.getShipCoordinates(ship, [parseInt(ship.dataset.row), parseInt(ship.dataset.col)]);\n            playerTwo.addShip(shipName, shipLength, shipCoordinates);\n            ship.remove();\n        })\n        document.querySelector('.controller-container').classList.toggle('inactive')\n        const playerOneCells = document.querySelectorAll('.player-one .cell');\n        const playerTwoCells = document.querySelectorAll('.player-two .cell');\n        const allShipContainers = document.querySelectorAll('.ship-container')\n        allShipContainers.forEach(container => container.classList.toggle('inactive'))\n        playerOne.turn = true;\n        dom.displayGameLog(playerActive())\n        playerOneCells.forEach(cell => cell.addEventListener('click', playerTwoAction))\n        playerTwoCells.forEach(cell => cell.addEventListener('click', playerOneAction))\n    }\n\n    const startGameButton = document.querySelector('button.start-game')\n    startGameButton.addEventListener('click', startGameVsPlayer)\n\n    const changeTurn = () => {\n        if (playerOne.turn) {\n            playerOne.turn = false;\n            playerTwo.turn = true;\n        } else {\n            playerOne.turn = true;\n            playerTwo.turn = false;\n        }\n    }\n\n    const playerAction = (event) => {\n        const activePlayer = playerActive()\n        if (event.target.classList.contains('hit') || event.target.classList.contains('miss')) return;\n        const coordinates = [parseInt(event.target.dataset.row), parseInt(event.target.dataset.col)]\n        const isHit = activePlayer.playerAttack(coordinates);\n        if (isHit) {\n            event.target.classList.add('hit')\n            const isGameOver = activePlayer.checkGameOver();\n            if (isGameOver) {\n                activePlayer.turn = false;\n                dom.displayWinner(activePlayer.name);\n                dom.vsPlayerDisplayBothBoards()\n                playerOne.reset()\n                playerTwo.reset()\n                startGameButton.removeEventListener('click', startGameVsPlayer);\n                return;\n            }\n        } else if (!isHit) {\n            event.target.classList.add('miss')\n        }\n        changeTurn()\n        setTimeout(() => {\n            setCountdown()\n            displayCountdown();\n            setTimeout(() => {\n                displayCountdown()\n                dom.displayGameLog(playerActive())\n                dom.changePlayer()\n            }, 6000)\n        }, 1000)\n    }\n\n    const playerOneAction = (event) => {\n        if (!playerOne.turn) return;\n        playerAction(event)\n    }\n\n    const playerTwoAction = (event) => {\n        if (!playerTwo.turn) return;\n        playerAction(event)\n    }\n\n\n}\n\nconst vsComputer = () => {\n    const player = new Player('Player')\n    const computer = new Computer('Computer')\n    player.setEnemyBoard(computer.getBoard())\n    computer.setEnemyBoard(player.getBoard())\n\n    const dom = DOM();\n    dom.initVsComputer(player, computer);\n\n    const activePlayer = () => {\n        return player.turn ? player : computer\n    }\n\n    const placeComputerShips = () => {\n        dom.placeComputerShips()\n        const allShips = document.querySelectorAll('.active .ship');\n        allShips.forEach(ship => {\n            const shipName = ship.id;\n            const shipLength = parseInt(ship.dataset.length);\n            const shipCoordinates = dom.getShipCoordinates(ship, [parseInt(ship.dataset.row), parseInt(ship.dataset.col)]);\n            computer.addShip(shipName, shipLength, shipCoordinates);\n            ship.remove();\n        })\n        document.querySelector('.active').classList.toggle('active')\n    }\n\n    const startGameVsComputer = () => {\n        if (!dom.checkShipsPlaced()) return;\n        const allShips = document.querySelectorAll('.active .ship');\n        allShips.forEach(ship => {\n            const shipName = ship.id;\n            const shipLength = parseInt(ship.dataset.length);\n            const shipCoordinates = dom.getShipCoordinates(ship, [parseInt(ship.dataset.row), parseInt(ship.dataset.col)]);\n            player.addShip(shipName, shipLength, shipCoordinates);\n            ship.remove();\n        })\n        document.querySelector('.controller-container').classList.toggle('inactive')\n        const computerCells = document.querySelectorAll('.player-two .cell');\n        player.turn = true;\n        computerCells.forEach(cell => cell.addEventListener('click', playerAction))\n        placeComputerShips()\n\n        dom.displayGameLog(activePlayer())\n        dom.displayBothBoards()\n    }\n\n    const startGameButton = document.querySelector('button.start-game')\n    startGameButton.addEventListener('click', startGameVsComputer)\n\n    const changeTurn = () => {\n        if (player.turn) {\n            player.turn = false;\n            computer.turn = true;\n        } else {\n            player.turn = true;\n            computer.turn = false;\n        }\n    }\n\n    const computerAction = () => {\n        if (!computer.turn) return;\n        const isHit = computer.computerAttacks();\n        const [row, col] = computer.getLastCoordinates();\n        const cell = document.querySelector(`.player-one.board .cell[data-row=\"${row}\"][data-col=\"${col}\"]`)\n        if (isHit) {\n            cell.classList.add('hit');\n            const isGameOver = computer.checkGameOver();\n            if (isGameOver) {\n                computer.turn = false;\n                dom.displayWinner(computer.name)\n                player.reset()\n                computer.reset()\n                startGameButton.removeEventListener('click', startGameVsComputer)\n            }\n        } else if (!isHit) {\n            cell.classList.add('miss')\n        }\n\n        setTimeout(() => {\n            changeTurn();\n            dom.displayGameLog(activePlayer())\n        }, 1000)\n\n    }\n\n    const playerAction = (event) => {\n        if (!player.turn) return;\n        if (event.target.classList.contains('hit') || event.target.classList.contains('miss')) return;\n        const coordinates = [parseInt(event.target.dataset.row), parseInt(event.target.dataset.col)]\n        const isHit = player.playerAttack(coordinates);\n        if (isHit) {\n            event.target.classList.add('hit')\n            const isGameOver = player.checkGameOver();\n            if (isGameOver) {\n                player.turn = false;\n                dom.displayWinner(player.name);\n                player.reset()\n                computer.reset()\n                startGameButton.removeEventListener('click', startGameVsComputer)\n            }\n        } else if (!isHit) {\n            event.target.classList.add('miss')\n        }\n        changeTurn()\n        dom.displayGameLog(activePlayer())\n        setTimeout(() => {\n            computerAction()\n        }, 1000)\n    }\n\n\n}\n\nconst playGame = () => {\n    const dom = DOM();\n    \n    const resetBoardButton = document.querySelector('button.reset-board')\n    resetBoardButton.addEventListener('click', dom.resetBoard)\n\n    const randomizeButton = document.querySelector('button.randomize')\n    randomizeButton.addEventListener('click', dom.placeRandomly)\n\n    const playAgainButton = document.querySelector('button.play-again')\n    playAgainButton.addEventListener('click', dom.resetGame)\n\n    document.addEventListener('click', event => {\n        if (event.target.closest('.vs-CPU')) {\n            vsComputer()\n        } else if (event.target.closest('.vs-player')) {\n            vsPlayer()\n        }\n    })\n}\n\nplayGame()\n"],"names":["displayBoards","playerOneBoard","document","querySelector","playerTwoBoard","i","j","playerOneCell","createElement","classList","add","dataset","row","col","append","playerTwoCell","generateShips","createdShips","name","length","forEach","ship","newShip","setAttribute","draggable","direction","shipPart","push","getShipCoordinates","startCoordinates","parseInt","shipCoordinates","isValidPosition","draggedShip","isInTheBoard","draggedShipCoordinates","shipsPlacedCoordinates","allShipsPlaced","querySelectorAll","allCellsUsed","startingCoordinates","coordinate","getAllCellsUsed","coord1","coord2","rowDiff","Math","abs","colDiff","areCoordinatesAdjacent","dragStart","event","dataTransfer","setData","target","id","dragEnd","preventDefault","toggle","dragOver","shipClick","closest","parentNode","contains","style","gridAutoFlow","dragEnter","dragLeave","remove","dragDrop","cell","data","getData","draggableShip","getElementById","position","shipListeners","addEventListener","displayShips","shipsContainer","resetBoard","shipContainer","getRandomCoordinates","floor","random","placeRandomly","changeDirection","loadGame","gameModeContainer","gameContainer","playerOne","controllerContainer","displayNames","playerTwo","playerOneName","playerTwoName","textContent","initVsPlayer","initVsComputer","player","computer","changePlayer","activePlayer","inactivePlayer","checkShipsPlaced","nextPlayerPlacement","nextPlayerButton","startGame","changePlayerDisplay","displayWinner","playerName","resetGame","allShipContainer","allPlayerContainer","winnerContainer","turn","container","displayBothBoards","shipContainers","placeComputerShips","vsPlayerDisplayBothBoards","displayGameLog","playerTurn","Ship","constructor","this","totalHits","sunk","getHit","isSunk","Board","board","Array","from","fill","ships","addShip","shipName","shipLength","coordinates","receiveAttack","getShips","Object","values","allShipsSunk","every","Player","enemyBoard","setEnemyBoard","getBoard","playerAttack","checkGameOver","reset","Computer","super","allAttacksDone","attackHit","allHitAttacks","nextAttack","isAttackAlreadyDone","attack","randomCoordinates","computerAttacks","shift","isHit","computerHits","resetAttackStatus","randomComputerAttack","at","lastHit","move","newRow","newCol","previousHit","filter","getLastCoordinates","displayCountdown","element","gameLog","dom","startGameVsComputer","computerCells","playerAction","startGameButton","changeTurn","removeEventListener","setTimeout","computerAction","vsComputer","playerActive","startGameVsPlayer","playerOneCells","playerTwoCells","playerTwoAction","playerOneAction","countdownElement","countdown","countdownInterval","setInterval","clearInterval","setCountdown","vsPlayer","playGame"],"sourceRoot":""}